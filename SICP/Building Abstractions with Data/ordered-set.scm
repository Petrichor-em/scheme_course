(define (element-of-set? x set)
	(cond ((null? set) #f)
		  ((= x (car set)) #t)
		  ((< x (car set)) #f)
		  (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
	(if (or (null? set1) (null? set2))
		`()
		(let ((x1 (car set1))
			  (x2 (car set2)))
			(cond ((= x1 x2)
						(cons x1 (intersection-set (cdr set1) (cdr set2))))
				  ((< x1 x2)
				  		(intersection-set (cdr set1) set2))
				  ((> x1 x2)
				  		(intersection-set set1 (cdr set2)))))))

(define (adjoin-set x set)
	(define (helper x set adjoined)
		(cond ((null? set) `())
			  (adjoined (cons (car set) (helper x (cdr set) #t)))
			  ((and (< x (car set))
			  	    (not adjoined))
						(cons x (helper x set #t)))
			  ((= x (car set)) (cons x (helper x (cdr set) #t)))
			  ((> x (car set)) (cons (car set) (helper x (cdr set) #f)))))
	(if (null? set)
		(list x)
		(helper x set #f)))

(define (union-set set1 set2)
	(cond ((null? set1) set2)
		  ((null? set2) set1)
		  (else
		  		(let ((x1 (car set1))
					  (x2 (car set2)))
					(cond ((< x1 x2) (cons x1 (union-set (cdr set1) set2)))
						  ((> x1 x2) (cons x2 (union-set set1 (cdr set2))))
						  ((= x1 x2) (cons x1 (union-set (cdr set1) (cdr set2)))))))))

(define oset (list 1 3 5 6 8))
(define oset2 (list 2 4 5 6 7))
(display (union-set oset oset2))
(newline)
(display (intersection-set oset oset2))
(newline)